pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/AM-GIT-PRAC/MLOPS.git'
        SCANNER_HOME = tool 'SonarQube Scanner' 
        MY_REPO_PATH = '/home/ubuntu/MLOPS'
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'github-creds', url: "${REPO_URL}", branch: 'main'
            }
        }
        
        stage('SonarQube Scan') {
            steps {
                withCredentials([string(credentialsId: 'sonarqube-creds', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                        -Dsonar.projectKey=mlops-legoland \
                        -Dsonar.sources=src \
                        -Dsonar.host.url=http://18.224.61.192:9000 \
                        -Dsonar.login=$SONAR_AUTH_TOKEN
                    """
                }
            }
        }
        
        stage('Terraform Init & Apply') {
            steps {
                scripts {
                    sh '''
                    cd /home/ubuntu/terraform
                    terraform init
                    terraform apply -auto-approve
                    '''
                }
            }
        }
        
        stage('Build & Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'aws-creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    script {
                        def IMAGE_NAME = "fraud-detection"
                        def IMAGE_TAG = "latest"
                        def AWS_REGION = "us-east-2"  // your region
                        def ACCOUNT_ID = "354918408969"  // your AWS account ID
                        def REPO_URI = "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${IMAGE_NAME}"
                        
                        dir("${MY_REPO_PATH}") {
                            sh '''
                            echo "Logging in to ECR..."
                            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                            aws configure set default.region ''' + AWS_REGION + '''
            
                            aws ecr get-login-password --region ''' + AWS_REGION + ''' | docker login --username AWS --password-stdin ''' + REPO_URI + '''
                            
                            pwd
                            ls -la
                            
                            echo "Building Docker image..."
                            docker build -t ''' + IMAGE_NAME + ''':''' + IMAGE_TAG + ''' .
            
                            echo "Tagging image..."
                            docker tag ''' + IMAGE_NAME + ''':''' + IMAGE_TAG + ''' ''' + REPO_URI + ''':''' + IMAGE_TAG + '''
            
                            echo "Pushing image to ECR..."
                            docker push ''' + REPO_URI + ''':''' + IMAGE_TAG + '''
                            '''
                        }
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                sh '''
                    kubectl apply -f k8s/deployment.yaml
                    kubectl apply -f k8s/service.yaml
                '''
            }
        }
        
        /*
        stage('Terraform Init & Apply') {
            steps {
                withCredentials([
                    usernamePassword(credentialsId: 'aws-creds',
                                     usernameVariable: 'AWS_ACCESS_KEY_ID',
                                     passwordVariable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    dir('terraform') {
                        sh 'cat helloworld.txt'
                    }
                }
            }
        }
        */
        
    }
}
